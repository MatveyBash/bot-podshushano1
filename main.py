import telebot
from telebot import types
from datetime import datetime, timedelta
import time
import threading
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7624136254:AAHudHeO0ZScnHqlIZmMOW4R1GoAJizqBqg'
TARGET_CHANNEL = '-1002702796095'  # ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)
ADMINS = [6172742677, 1616523146, 5683628958]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {user_id: {'unban_time': datetime –∏–ª–∏ None, 'reason': str, 'banned_by': int, 'ban_date': str}}
BLACKLIST = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
CACHE_CLEAN_INTERVAL = 10  # –¥–Ω–µ–π
LAST_CACHE_CLEAN = datetime.now()

bot = telebot.TeleBot(TOKEN)


def clean_cache():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
    global LAST_CACHE_CLEAN

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"[{datetime.now()}] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")

    # –ü—Ä–∏–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–∞–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    current_time = datetime.now()
    expired_bans = [
        user_id for user_id, data in BLACKLIST.items()
        if data['unban_time'] and data['unban_time'] < current_time
    ]

    for user_id in expired_bans:
        del BLACKLIST[user_id]

    LAST_CACHE_CLEAN = current_time
    print(f"[{datetime.now()}] –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {len(expired_bans)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –±–∞–Ω–æ–≤.")


def cache_clean_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
    while True:
        time.sleep(60 * 60 * 24)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if (datetime.now() - LAST_CACHE_CLEAN).days >= CACHE_CLEAN_INTERVAL:
            clean_cache()


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
cleaner_thread = threading.Thread(target=cache_clean_scheduler, daemon=True)
cleaner_thread.start()


def format_timedelta(delta):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timedelta –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    parts = []
    if days > 0:
        parts.append(f"{days}–¥")
    if hours > 0:
        parts.append(f"{hours}—á")
    if minutes > 0:
        parts.append(f"{minutes}–º")
    if seconds > 0 or not parts:
        parts.append(f"{seconds}—Å")

    return ' '.join(parts)


def is_user_banned(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
    if user_id not in BLACKLIST:
        return False, None

    ban_data = BLACKLIST[user_id]
    unban_time = ban_data['unban_time']

    if unban_time is None:  # –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω
        return True, "–Ω–∞–≤—Å–µ–≥–¥–∞"

    if datetime.now() < unban_time:  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω
        remaining = unban_time - datetime.now()
        return True, format_timedelta(remaining)

    # –ë–∞–Ω –∏—Å—Ç—ë–∫
    del BLACKLIST[user_id]
    return False, None


def parse_ban_time(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –±–∞–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –∏–ª–∏ None –¥–ª—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –±–∞–Ω–∞"""
    if time_str.lower() == 'p':
        return None

    unit = time_str[-1].lower()
    if unit.isalpha():
        num = int(time_str[:-1])
    else:
        num = int(time_str)
        unit = 's'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–∫—É–Ω–¥—ã

    if unit == 's':
        return datetime.now() + timedelta(seconds=num)
    elif unit == 'm':
        return datetime.now() + timedelta(minutes=num)
    elif unit == 'h':
        return datetime.now() + timedelta(hours=num)
    elif unit == 'd':
        return datetime.now() + timedelta(days=num)
    else:
        return datetime.now() + timedelta(minutes=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞


@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.reply_to(message,
                 "–ü—Ä–∏–≤–µ—Çüëã, —ç—Ç–æ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ø–æ–¥—Å–ª—É—à–∞–Ω–æ.ü§´\n–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —á—Ç–æ–± —è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –ø–æ–¥—Å–ª—É—à–∞–Ω–æüò∂‚Äçüå´\n\n–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é —á—Ç–æ —á–∞—Ç –º–æ–¥–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∞–º–∏ –∏ –∑–∞ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –≤—ã –±—É–¥–µ—Ç–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ —á—Å –±–æ—Ç–∞(–ø–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∑–∞–∫—Ä–µ–ø–µ –≤ –∫–∞–Ω–∞–ª–µ)‚õî")


@bot.message_handler(commands=['clean_cache'], func=lambda m: m.from_user.id in ADMINS)
def handle_clean_cache(message):
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    clean_cache()
    bot.reply_to(message, "‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")


@bot.message_handler(commands=['banlist'], func=lambda m: m.from_user.id in ADMINS)
def handle_banlist(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not BLACKLIST:
        bot.reply_to(message, "üü¢ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return

    response = "üî¥ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, ban_data in BLACKLIST.items():
        admin_id = ban_data['banned_by']
        reason = ban_data['reason']
        ban_date = ban_data['ban_date']

        if ban_data['unban_time'] is None:
            time_left = "–ù–ê–í–°–ï–ì–î–ê"
        else:
            time_left = f"–¥–æ {ban_data['unban_time'].strftime('%Y-%m-%d %H:%M')}"

        response += (
            f"üë§ ID: {user_id}\n"
            f"‚è≥ –°—Ä–æ–∫: {time_left}\n"
            f"üìÖ –î–∞—Ç–∞ –±–∞–Ω–∞: {ban_date}\n"
            f"üõ° –ê–¥–º–∏–Ω: {admin_id}\n"
            f"üìå –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    if len(response) > 4000:
        parts = [response[i:i + 4000] for i in range(0, len(response), 4000)]
        for part in parts:
            bot.send_message(message.chat.id, part)
    else:
        bot.send_message(message.chat.id, response)


@bot.message_handler(commands=['unban'], func=lambda m: m.from_user.id in ADMINS)
def handle_unban(message):
    """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 2:
            bot.reply_to(message,
                         "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/unban [user_id] - —Ä–∞–∑–±–∞–Ω –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã\n/unban [user_id] [–ø—Ä–∏—á–∏–Ω–∞] - —Ä–∞–∑–±–∞–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π\n–ü—Ä–∏–º–µ—Ä:\n/unban 123456\n/unban 123456 –æ—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return

        user_id = int(parts[1])
        reason = parts[2] if len(parts) > 2 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        if user_id not in BLACKLIST:
            bot.reply_to(message, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
            return

        # –£–¥–∞–ª—è–µ–º –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        del BLACKLIST[user_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        bot.reply_to(message, f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–∞–Ω–µ
        try:
            unban_msg = (
                f"‚úÖ –í–ê–° –†–ê–ó–ë–ê–ù–ò–õ–ò!\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            bot.send_message(user_id, unban_msg)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Ä–∞–∑–±–∞–Ω–µ: {e}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['ban'], func=lambda m: m.from_user.id in ADMINS)
def handle_ban(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 2:
            bot.reply_to(message,
                         "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/ban [user_id] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]\n–ü—Ä–∏–º–µ—Ä—ã:\n/ban 123456 30m —Å–ø–∞–º\n/ban 789012 p –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª")
            return

        user_id = int(parts[1])

        if user_id in ADMINS:
            bot.reply_to(message, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        if len(parts) > 2:
            time_part = parts[2].split(maxsplit=1)
            ban_time = parse_ban_time(time_part[0])
            reason = time_part[1] if len(time_part) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            ban_time = parse_ban_time('1h')
            reason = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        BLACKLIST[user_id] = {
            'unban_time': ban_time,
            'reason': reason,
            'banned_by': message.from_user.id,
            'ban_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }

        if ban_time is None:
            response = f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –ù–ê–í–°–ï–ì–î–ê\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        else:
            response = f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –¥–æ {ban_time.strftime('%Y-%m-%d %H:%M:%S')}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"

        bot.reply_to(message, response)

        try:
            if ban_time is None:
                ban_msg = "‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ –ù–ê–í–°–ï–ì–î–ê!\n–ü—Ä–∏—á–∏–Ω–∞: " + reason
            else:
                ban_msg = f"‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ –ù–ê {format_timedelta(ban_time - datetime.now())}\n–ü—Ä–∏—á–∏–Ω–∞: " + reason
            bot.send_message(user_id, ban_msg)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def forward_to_channel(message, caption):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
    try:
        if message.content_type == 'text':
            bot.send_message(TARGET_CHANNEL, caption)
        elif message.content_type == 'photo':
            bot.send_photo(TARGET_CHANNEL, message.photo[-1].file_id, caption=caption)
        elif message.content_type == 'video':
            bot.send_video(TARGET_CHANNEL, message.video.file_id, caption=caption)
        elif message.content_type == 'document':
            bot.send_document(TARGET_CHANNEL, message.document.file_id, caption=caption)
        elif message.content_type == 'audio':
            bot.send_audio(TARGET_CHANNEL, message.audio.file_id, caption=caption)
        elif message.content_type == 'voice':
            bot.send_voice(TARGET_CHANNEL, message.voice.file_id, caption=caption)
        elif message.content_type == 'sticker':
            bot.send_sticker(TARGET_CHANNEL, message.sticker.file_id)
        elif message.content_type == 'video_note':
            bot.send_video_note(TARGET_CHANNEL, message.video_note.file_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")


@bot.message_handler(content_types=[
    'text', 'photo', 'video', 'document',
    'audio', 'voice', 'sticker', 'video_note'
])
def handle_all_messages(message):
    user_id = message.from_user.id

    if message.text and message.text.startswith('/start'):
        return

    banned, remaining = is_user_banned(user_id)
    if banned:
        if remaining == "–Ω–∞–≤—Å–µ–≥–¥–∞":
            bot.reply_to(message, "‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ –ù–ê–í–°–ï–ì–î–ê!")
        else:
            bot.reply_to(message, f"‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´! –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")
        return

    caption = f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id})"
    if message.caption:
        caption += f"\n\n{message.caption}"
    elif message.text:
        caption += f"\n\n{message.text}"

    forward_to_channel(message, caption)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"–°–ª–µ–¥—É—é—â–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —á–µ—Ä–µ–∑ {CACHE_CLEAN_INTERVAL} –¥–Ω–µ–π")

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        time.sleep(15)
